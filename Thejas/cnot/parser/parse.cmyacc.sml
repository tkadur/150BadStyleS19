(* File generated by CM-Yacc version 2.1 *)

functor CNotParseFun
   (structure Streamable : STREAMABLE
    structure Arg :
       sig
          type int
          type string
          type aexp
          type bexp
          type command
          type commandlist

          val cmds_cons : command * commandlist -> commandlist
          val cmds_one : command -> commandlist
          val cmds_empty : unit -> commandlist
          val cmds_id : commandlist -> commandlist
          val cmd_return : aexp -> command
          val cmd_continue : unit -> command
          val cmd_break : unit -> command
          val cmd_loop : commandlist -> command
          val cmd_if : bexp * commandlist * commandlist -> command
          val cmd_assign : string * aexp -> command
          val bexp_or : bexp * bexp -> bexp
          val bexp_and : bexp * bexp -> bexp
          val bexp_not : bexp -> bexp
          val bexp_greaterequal : aexp * aexp -> bexp
          val bexp_greater : aexp * aexp -> bexp
          val bexp_lessequal : aexp * aexp -> bexp
          val bexp_less : aexp * aexp -> bexp
          val bexp_notequal : aexp * aexp -> bexp
          val bexp_equal : aexp * aexp -> bexp
          val bexp_false : unit -> bexp
          val bexp_true : unit -> bexp
          val bexp_id : bexp -> bexp
          val aexp_mult : aexp * aexp -> aexp
          val aexp_sub : aexp * aexp -> aexp
          val aexp_add : aexp * aexp -> aexp
          val aexp_number : int -> aexp
          val aexp_ident : string -> aexp
          val aexp_id : aexp -> aexp

          datatype terminal =
             ADD
           | SUB
           | MULT
           | NUMBER of int
           | IDENT of string
           | LPAREN
           | RPAREN
           | EQUAL
           | NOTEQUAL
           | LESS
           | LESSEQUAL
           | GREATER
           | GREATEREQUAL
           | TRUE
           | FALSE
           | AND
           | OR
           | NOT
           | ASSIGN
           | SEMI
           | IF
           | LBRACE
           | RBRACE
           | ELSE
           | LOOP
           | WHILE
           | BREAK
           | CONTINUE
           | RETURN

          val error : terminal Streamable.t -> exn
       end)
   :>
   sig
      val parse : Arg.terminal Streamable.t -> Arg.commandlist * Arg.terminal Streamable.t
   end
=

(*

AUTOMATON LISTING
=================

State 0:

start -> . Cmds  / 0
18 : Cmd -> . IDENT ASSIGN Aexp SEMI  / 1
19 : Cmd -> . IF LPAREN Bexp RPAREN Block ELSE Block  / 1
20 : Cmd -> . LOOP Block  / 1
21 : Cmd -> . WHILE LPAREN TRUE RPAREN Block  / 1
22 : Cmd -> . BREAK SEMI  / 1
23 : Cmd -> . CONTINUE SEMI  / 1
24 : Cmd -> . RETURN Aexp SEMI  / 1
27 : Cmds -> . Cmd  / 0
28 : Cmds -> . Cmd Cmds  / 0

IDENT => shift 8
IF => shift 7
LOOP => shift 6
WHILE => shift 5
BREAK => shift 4
CONTINUE => shift 3
RETURN => shift 2
Cmd => goto 1
Cmds => goto 9

-----

State 1:

18 : Cmd -> . IDENT ASSIGN Aexp SEMI  / 2
19 : Cmd -> . IF LPAREN Bexp RPAREN Block ELSE Block  / 2
20 : Cmd -> . LOOP Block  / 2
21 : Cmd -> . WHILE LPAREN TRUE RPAREN Block  / 2
22 : Cmd -> . BREAK SEMI  / 2
23 : Cmd -> . CONTINUE SEMI  / 2
24 : Cmd -> . RETURN Aexp SEMI  / 2
27 : Cmds -> . Cmd  / 3
27 : Cmds -> Cmd .  / 3
28 : Cmds -> . Cmd Cmds  / 3
28 : Cmds -> Cmd . Cmds  / 3

$ => reduce 27
IDENT => shift 8
IF => shift 7
RBRACE => reduce 27
LOOP => shift 6
WHILE => shift 5
BREAK => shift 4
CONTINUE => shift 3
RETURN => shift 2
Cmd => goto 1
Cmds => goto 10

-----

State 2:

0 : Aexp -> . LPAREN Aexp RPAREN  / 4
1 : Aexp -> . IDENT  / 4
2 : Aexp -> . NUMBER  / 4
3 : Aexp -> . Aexp ADD Aexp  / 4
4 : Aexp -> . Aexp SUB Aexp  / 4
5 : Aexp -> . Aexp MULT Aexp  / 4
24 : Cmd -> RETURN . Aexp SEMI  / 2

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 11

-----

State 3:

23 : Cmd -> CONTINUE . SEMI  / 2

SEMI => shift 15

-----

State 4:

22 : Cmd -> BREAK . SEMI  / 2

SEMI => shift 16

-----

State 5:

21 : Cmd -> WHILE . LPAREN TRUE RPAREN Block  / 2

LPAREN => shift 17

-----

State 6:

20 : Cmd -> LOOP . Block  / 2
25 : Block -> . LBRACE Cmds RBRACE  / 2
26 : Block -> . LBRACE RBRACE  / 2

LBRACE => shift 18
Block => goto 19

-----

State 7:

19 : Cmd -> IF . LPAREN Bexp RPAREN Block ELSE Block  / 2

LPAREN => shift 20

-----

State 8:

18 : Cmd -> IDENT . ASSIGN Aexp SEMI  / 2

ASSIGN => shift 21

-----

State 9:

start -> Cmds .  / 0

$ => accept

-----

State 10:

28 : Cmds -> Cmd Cmds .  / 3

$ => reduce 28
RBRACE => reduce 28

-----

State 11:

3 : Aexp -> Aexp . ADD Aexp  / 4
4 : Aexp -> Aexp . SUB Aexp  / 4
5 : Aexp -> Aexp . MULT Aexp  / 4
24 : Cmd -> RETURN Aexp . SEMI  / 2

ADD => shift 25
SUB => shift 24
MULT => shift 23
SEMI => shift 22

-----

State 12:

0 : Aexp -> . LPAREN Aexp RPAREN  / 5
0 : Aexp -> LPAREN . Aexp RPAREN  / 6
1 : Aexp -> . IDENT  / 5
2 : Aexp -> . NUMBER  / 5
3 : Aexp -> . Aexp ADD Aexp  / 5
4 : Aexp -> . Aexp SUB Aexp  / 5
5 : Aexp -> . Aexp MULT Aexp  / 5

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 26

-----

State 13:

1 : Aexp -> IDENT .  / 6

ADD => reduce 1
SUB => reduce 1
MULT => reduce 1
RPAREN => reduce 1
EQUAL => reduce 1
NOTEQUAL => reduce 1
LESS => reduce 1
LESSEQUAL => reduce 1
GREATER => reduce 1
GREATEREQUAL => reduce 1
AND => reduce 1
OR => reduce 1
SEMI => reduce 1

-----

State 14:

2 : Aexp -> NUMBER .  / 6

ADD => reduce 2
SUB => reduce 2
MULT => reduce 2
RPAREN => reduce 2
EQUAL => reduce 2
NOTEQUAL => reduce 2
LESS => reduce 2
LESSEQUAL => reduce 2
GREATER => reduce 2
GREATEREQUAL => reduce 2
AND => reduce 2
OR => reduce 2
SEMI => reduce 2

-----

State 15:

23 : Cmd -> CONTINUE SEMI .  / 2

$ => reduce 23
IDENT => reduce 23
IF => reduce 23
RBRACE => reduce 23
LOOP => reduce 23
WHILE => reduce 23
BREAK => reduce 23
CONTINUE => reduce 23
RETURN => reduce 23

-----

State 16:

22 : Cmd -> BREAK SEMI .  / 2

$ => reduce 22
IDENT => reduce 22
IF => reduce 22
RBRACE => reduce 22
LOOP => reduce 22
WHILE => reduce 22
BREAK => reduce 22
CONTINUE => reduce 22
RETURN => reduce 22

-----

State 17:

21 : Cmd -> WHILE LPAREN . TRUE RPAREN Block  / 2

TRUE => shift 27

-----

State 18:

18 : Cmd -> . IDENT ASSIGN Aexp SEMI  / 7
19 : Cmd -> . IF LPAREN Bexp RPAREN Block ELSE Block  / 7
20 : Cmd -> . LOOP Block  / 7
21 : Cmd -> . WHILE LPAREN TRUE RPAREN Block  / 7
22 : Cmd -> . BREAK SEMI  / 7
23 : Cmd -> . CONTINUE SEMI  / 7
24 : Cmd -> . RETURN Aexp SEMI  / 7
25 : Block -> LBRACE . Cmds RBRACE  / 8
26 : Block -> LBRACE . RBRACE  / 8
27 : Cmds -> . Cmd  / 9
28 : Cmds -> . Cmd Cmds  / 9

IDENT => shift 8
IF => shift 7
RBRACE => shift 28
LOOP => shift 6
WHILE => shift 5
BREAK => shift 4
CONTINUE => shift 3
RETURN => shift 2
Cmd => goto 1
Cmds => goto 29

-----

State 19:

20 : Cmd -> LOOP Block .  / 2

$ => reduce 20
IDENT => reduce 20
IF => reduce 20
RBRACE => reduce 20
LOOP => reduce 20
WHILE => reduce 20
BREAK => reduce 20
CONTINUE => reduce 20
RETURN => reduce 20

-----

State 20:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp ADD Aexp  / 10
4 : Aexp -> . Aexp SUB Aexp  / 10
5 : Aexp -> . Aexp MULT Aexp  / 10
6 : Bexp -> . LPAREN Bexp RPAREN  / 11
7 : Bexp -> . TRUE  / 11
8 : Bexp -> . FALSE  / 11
9 : Bexp -> . Aexp EQUAL Aexp  / 11
10 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
11 : Bexp -> . Aexp LESS Aexp  / 11
12 : Bexp -> . Aexp LESSEQUAL Aexp  / 11
13 : Bexp -> . Aexp GREATER Aexp  / 11
14 : Bexp -> . Aexp GREATEREQUAL Aexp  / 11
15 : Bexp -> . NOT Bexp  / 11
16 : Bexp -> . Bexp AND Bexp  / 11
17 : Bexp -> . Bexp OR Bexp  / 11
19 : Cmd -> IF LPAREN . Bexp RPAREN Block ELSE Block  / 2

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 35
TRUE => shift 34
FALSE => shift 33
NOT => shift 32
Aexp => goto 31
Bexp => goto 30

-----

State 21:

0 : Aexp -> . LPAREN Aexp RPAREN  / 4
1 : Aexp -> . IDENT  / 4
2 : Aexp -> . NUMBER  / 4
3 : Aexp -> . Aexp ADD Aexp  / 4
4 : Aexp -> . Aexp SUB Aexp  / 4
5 : Aexp -> . Aexp MULT Aexp  / 4
18 : Cmd -> IDENT ASSIGN . Aexp SEMI  / 2

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 36

-----

State 22:

24 : Cmd -> RETURN Aexp SEMI .  / 2

$ => reduce 24
IDENT => reduce 24
IF => reduce 24
RBRACE => reduce 24
LOOP => reduce 24
WHILE => reduce 24
BREAK => reduce 24
CONTINUE => reduce 24
RETURN => reduce 24

-----

State 23:

0 : Aexp -> . LPAREN Aexp RPAREN  / 6
1 : Aexp -> . IDENT  / 6
2 : Aexp -> . NUMBER  / 6
3 : Aexp -> . Aexp ADD Aexp  / 6
4 : Aexp -> . Aexp SUB Aexp  / 6
5 : Aexp -> . Aexp MULT Aexp  / 6
5 : Aexp -> Aexp MULT . Aexp  / 6

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 37

-----

State 24:

0 : Aexp -> . LPAREN Aexp RPAREN  / 6
1 : Aexp -> . IDENT  / 6
2 : Aexp -> . NUMBER  / 6
3 : Aexp -> . Aexp ADD Aexp  / 6
4 : Aexp -> . Aexp SUB Aexp  / 6
4 : Aexp -> Aexp SUB . Aexp  / 6
5 : Aexp -> . Aexp MULT Aexp  / 6

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 38

-----

State 25:

0 : Aexp -> . LPAREN Aexp RPAREN  / 6
1 : Aexp -> . IDENT  / 6
2 : Aexp -> . NUMBER  / 6
3 : Aexp -> . Aexp ADD Aexp  / 6
3 : Aexp -> Aexp ADD . Aexp  / 6
4 : Aexp -> . Aexp SUB Aexp  / 6
5 : Aexp -> . Aexp MULT Aexp  / 6

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 39

-----

State 26:

0 : Aexp -> LPAREN Aexp . RPAREN  / 6
3 : Aexp -> Aexp . ADD Aexp  / 5
4 : Aexp -> Aexp . SUB Aexp  / 5
5 : Aexp -> Aexp . MULT Aexp  / 5

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => shift 40

-----

State 27:

21 : Cmd -> WHILE LPAREN TRUE . RPAREN Block  / 2

RPAREN => shift 41

-----

State 28:

26 : Block -> LBRACE RBRACE .  / 8

$ => reduce 26
IDENT => reduce 26
IF => reduce 26
RBRACE => reduce 26
ELSE => reduce 26
LOOP => reduce 26
WHILE => reduce 26
BREAK => reduce 26
CONTINUE => reduce 26
RETURN => reduce 26

-----

State 29:

25 : Block -> LBRACE Cmds . RBRACE  / 8

RBRACE => shift 42

-----

State 30:

16 : Bexp -> Bexp . AND Bexp  / 11
17 : Bexp -> Bexp . OR Bexp  / 11
19 : Cmd -> IF LPAREN Bexp . RPAREN Block ELSE Block  / 2

RPAREN => shift 43
AND => shift 44
OR => shift 45

-----

State 31:

3 : Aexp -> Aexp . ADD Aexp  / 10
4 : Aexp -> Aexp . SUB Aexp  / 10
5 : Aexp -> Aexp . MULT Aexp  / 10
9 : Bexp -> Aexp . EQUAL Aexp  / 11
10 : Bexp -> Aexp . NOTEQUAL Aexp  / 11
11 : Bexp -> Aexp . LESS Aexp  / 11
12 : Bexp -> Aexp . LESSEQUAL Aexp  / 11
13 : Bexp -> Aexp . GREATER Aexp  / 11
14 : Bexp -> Aexp . GREATEREQUAL Aexp  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
EQUAL => shift 51
NOTEQUAL => shift 50
LESS => shift 49
LESSEQUAL => shift 48
GREATER => shift 47
GREATEREQUAL => shift 46

-----

State 32:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp ADD Aexp  / 10
4 : Aexp -> . Aexp SUB Aexp  / 10
5 : Aexp -> . Aexp MULT Aexp  / 10
6 : Bexp -> . LPAREN Bexp RPAREN  / 11
7 : Bexp -> . TRUE  / 11
8 : Bexp -> . FALSE  / 11
9 : Bexp -> . Aexp EQUAL Aexp  / 11
10 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
11 : Bexp -> . Aexp LESS Aexp  / 11
12 : Bexp -> . Aexp LESSEQUAL Aexp  / 11
13 : Bexp -> . Aexp GREATER Aexp  / 11
14 : Bexp -> . Aexp GREATEREQUAL Aexp  / 11
15 : Bexp -> . NOT Bexp  / 11
15 : Bexp -> NOT . Bexp  / 11
16 : Bexp -> . Bexp AND Bexp  / 11
17 : Bexp -> . Bexp OR Bexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 35
TRUE => shift 34
FALSE => shift 33
NOT => shift 32
Aexp => goto 31
Bexp => goto 52

-----

State 33:

8 : Bexp -> FALSE .  / 11

RPAREN => reduce 8
AND => reduce 8
OR => reduce 8

-----

State 34:

7 : Bexp -> TRUE .  / 11

RPAREN => reduce 7
AND => reduce 7
OR => reduce 7

-----

State 35:

0 : Aexp -> . LPAREN Aexp RPAREN  / 12
0 : Aexp -> LPAREN . Aexp RPAREN  / 12
1 : Aexp -> . IDENT  / 12
2 : Aexp -> . NUMBER  / 12
3 : Aexp -> . Aexp ADD Aexp  / 12
4 : Aexp -> . Aexp SUB Aexp  / 12
5 : Aexp -> . Aexp MULT Aexp  / 12
6 : Bexp -> . LPAREN Bexp RPAREN  / 11
6 : Bexp -> LPAREN . Bexp RPAREN  / 11
7 : Bexp -> . TRUE  / 11
8 : Bexp -> . FALSE  / 11
9 : Bexp -> . Aexp EQUAL Aexp  / 11
10 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
11 : Bexp -> . Aexp LESS Aexp  / 11
12 : Bexp -> . Aexp LESSEQUAL Aexp  / 11
13 : Bexp -> . Aexp GREATER Aexp  / 11
14 : Bexp -> . Aexp GREATEREQUAL Aexp  / 11
15 : Bexp -> . NOT Bexp  / 11
16 : Bexp -> . Bexp AND Bexp  / 11
17 : Bexp -> . Bexp OR Bexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 35
TRUE => shift 34
FALSE => shift 33
NOT => shift 32
Aexp => goto 54
Bexp => goto 53

-----

State 36:

3 : Aexp -> Aexp . ADD Aexp  / 4
4 : Aexp -> Aexp . SUB Aexp  / 4
5 : Aexp -> Aexp . MULT Aexp  / 4
18 : Cmd -> IDENT ASSIGN Aexp . SEMI  / 2

ADD => shift 25
SUB => shift 24
MULT => shift 23
SEMI => shift 55

-----

State 37:

3 : Aexp -> Aexp . ADD Aexp  / 6
4 : Aexp -> Aexp . SUB Aexp  / 6
5 : Aexp -> Aexp . MULT Aexp  / 6
5 : Aexp -> Aexp MULT Aexp .  / 6

ADD => reduce 5, shift 25  PRECEDENCE
SUB => reduce 5, shift 24  PRECEDENCE
MULT => shift 23, reduce 5  PRECEDENCE
RPAREN => reduce 5
EQUAL => reduce 5
NOTEQUAL => reduce 5
LESS => reduce 5
LESSEQUAL => reduce 5
GREATER => reduce 5
GREATEREQUAL => reduce 5
AND => reduce 5
OR => reduce 5
SEMI => reduce 5

-----

State 38:

3 : Aexp -> Aexp . ADD Aexp  / 6
4 : Aexp -> Aexp . SUB Aexp  / 6
4 : Aexp -> Aexp SUB Aexp .  / 6
5 : Aexp -> Aexp . MULT Aexp  / 6

ADD => shift 25, reduce 4  PRECEDENCE
SUB => shift 24, reduce 4  PRECEDENCE
MULT => shift 23, reduce 4  PRECEDENCE
RPAREN => reduce 4
EQUAL => reduce 4
NOTEQUAL => reduce 4
LESS => reduce 4
LESSEQUAL => reduce 4
GREATER => reduce 4
GREATEREQUAL => reduce 4
AND => reduce 4
OR => reduce 4
SEMI => reduce 4

-----

State 39:

3 : Aexp -> Aexp . ADD Aexp  / 6
3 : Aexp -> Aexp ADD Aexp .  / 6
4 : Aexp -> Aexp . SUB Aexp  / 6
5 : Aexp -> Aexp . MULT Aexp  / 6

ADD => shift 25, reduce 3  PRECEDENCE
SUB => shift 24, reduce 3  PRECEDENCE
MULT => shift 23, reduce 3  PRECEDENCE
RPAREN => reduce 3
EQUAL => reduce 3
NOTEQUAL => reduce 3
LESS => reduce 3
LESSEQUAL => reduce 3
GREATER => reduce 3
GREATEREQUAL => reduce 3
AND => reduce 3
OR => reduce 3
SEMI => reduce 3

-----

State 40:

0 : Aexp -> LPAREN Aexp RPAREN .  / 6

ADD => reduce 0
SUB => reduce 0
MULT => reduce 0
RPAREN => reduce 0
EQUAL => reduce 0
NOTEQUAL => reduce 0
LESS => reduce 0
LESSEQUAL => reduce 0
GREATER => reduce 0
GREATEREQUAL => reduce 0
AND => reduce 0
OR => reduce 0
SEMI => reduce 0

-----

State 41:

21 : Cmd -> WHILE LPAREN TRUE RPAREN . Block  / 2
25 : Block -> . LBRACE Cmds RBRACE  / 2
26 : Block -> . LBRACE RBRACE  / 2

LBRACE => shift 18
Block => goto 56

-----

State 42:

25 : Block -> LBRACE Cmds RBRACE .  / 8

$ => reduce 25
IDENT => reduce 25
IF => reduce 25
RBRACE => reduce 25
ELSE => reduce 25
LOOP => reduce 25
WHILE => reduce 25
BREAK => reduce 25
CONTINUE => reduce 25
RETURN => reduce 25

-----

State 43:

19 : Cmd -> IF LPAREN Bexp RPAREN . Block ELSE Block  / 2
25 : Block -> . LBRACE Cmds RBRACE  / 13
26 : Block -> . LBRACE RBRACE  / 13

LBRACE => shift 18
Block => goto 57

-----

State 44:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp ADD Aexp  / 10
4 : Aexp -> . Aexp SUB Aexp  / 10
5 : Aexp -> . Aexp MULT Aexp  / 10
6 : Bexp -> . LPAREN Bexp RPAREN  / 11
7 : Bexp -> . TRUE  / 11
8 : Bexp -> . FALSE  / 11
9 : Bexp -> . Aexp EQUAL Aexp  / 11
10 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
11 : Bexp -> . Aexp LESS Aexp  / 11
12 : Bexp -> . Aexp LESSEQUAL Aexp  / 11
13 : Bexp -> . Aexp GREATER Aexp  / 11
14 : Bexp -> . Aexp GREATEREQUAL Aexp  / 11
15 : Bexp -> . NOT Bexp  / 11
16 : Bexp -> . Bexp AND Bexp  / 11
16 : Bexp -> Bexp AND . Bexp  / 11
17 : Bexp -> . Bexp OR Bexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 35
TRUE => shift 34
FALSE => shift 33
NOT => shift 32
Aexp => goto 31
Bexp => goto 58

-----

State 45:

0 : Aexp -> . LPAREN Aexp RPAREN  / 10
1 : Aexp -> . IDENT  / 10
2 : Aexp -> . NUMBER  / 10
3 : Aexp -> . Aexp ADD Aexp  / 10
4 : Aexp -> . Aexp SUB Aexp  / 10
5 : Aexp -> . Aexp MULT Aexp  / 10
6 : Bexp -> . LPAREN Bexp RPAREN  / 11
7 : Bexp -> . TRUE  / 11
8 : Bexp -> . FALSE  / 11
9 : Bexp -> . Aexp EQUAL Aexp  / 11
10 : Bexp -> . Aexp NOTEQUAL Aexp  / 11
11 : Bexp -> . Aexp LESS Aexp  / 11
12 : Bexp -> . Aexp LESSEQUAL Aexp  / 11
13 : Bexp -> . Aexp GREATER Aexp  / 11
14 : Bexp -> . Aexp GREATEREQUAL Aexp  / 11
15 : Bexp -> . NOT Bexp  / 11
16 : Bexp -> . Bexp AND Bexp  / 11
17 : Bexp -> . Bexp OR Bexp  / 11
17 : Bexp -> Bexp OR . Bexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 35
TRUE => shift 34
FALSE => shift 33
NOT => shift 32
Aexp => goto 31
Bexp => goto 59

-----

State 46:

0 : Aexp -> . LPAREN Aexp RPAREN  / 14
1 : Aexp -> . IDENT  / 14
2 : Aexp -> . NUMBER  / 14
3 : Aexp -> . Aexp ADD Aexp  / 14
4 : Aexp -> . Aexp SUB Aexp  / 14
5 : Aexp -> . Aexp MULT Aexp  / 14
14 : Bexp -> Aexp GREATEREQUAL . Aexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 60

-----

State 47:

0 : Aexp -> . LPAREN Aexp RPAREN  / 14
1 : Aexp -> . IDENT  / 14
2 : Aexp -> . NUMBER  / 14
3 : Aexp -> . Aexp ADD Aexp  / 14
4 : Aexp -> . Aexp SUB Aexp  / 14
5 : Aexp -> . Aexp MULT Aexp  / 14
13 : Bexp -> Aexp GREATER . Aexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 61

-----

State 48:

0 : Aexp -> . LPAREN Aexp RPAREN  / 14
1 : Aexp -> . IDENT  / 14
2 : Aexp -> . NUMBER  / 14
3 : Aexp -> . Aexp ADD Aexp  / 14
4 : Aexp -> . Aexp SUB Aexp  / 14
5 : Aexp -> . Aexp MULT Aexp  / 14
12 : Bexp -> Aexp LESSEQUAL . Aexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 62

-----

State 49:

0 : Aexp -> . LPAREN Aexp RPAREN  / 14
1 : Aexp -> . IDENT  / 14
2 : Aexp -> . NUMBER  / 14
3 : Aexp -> . Aexp ADD Aexp  / 14
4 : Aexp -> . Aexp SUB Aexp  / 14
5 : Aexp -> . Aexp MULT Aexp  / 14
11 : Bexp -> Aexp LESS . Aexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 63

-----

State 50:

0 : Aexp -> . LPAREN Aexp RPAREN  / 14
1 : Aexp -> . IDENT  / 14
2 : Aexp -> . NUMBER  / 14
3 : Aexp -> . Aexp ADD Aexp  / 14
4 : Aexp -> . Aexp SUB Aexp  / 14
5 : Aexp -> . Aexp MULT Aexp  / 14
10 : Bexp -> Aexp NOTEQUAL . Aexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 64

-----

State 51:

0 : Aexp -> . LPAREN Aexp RPAREN  / 14
1 : Aexp -> . IDENT  / 14
2 : Aexp -> . NUMBER  / 14
3 : Aexp -> . Aexp ADD Aexp  / 14
4 : Aexp -> . Aexp SUB Aexp  / 14
5 : Aexp -> . Aexp MULT Aexp  / 14
9 : Bexp -> Aexp EQUAL . Aexp  / 11

NUMBER => shift 14
IDENT => shift 13
LPAREN => shift 12
Aexp => goto 65

-----

State 52:

15 : Bexp -> NOT Bexp .  / 11
16 : Bexp -> Bexp . AND Bexp  / 11
17 : Bexp -> Bexp . OR Bexp  / 11

RPAREN => reduce 15
AND => reduce 15, shift 44  PRECEDENCE
OR => reduce 15, shift 45  PRECEDENCE

-----

State 53:

6 : Bexp -> LPAREN Bexp . RPAREN  / 11
16 : Bexp -> Bexp . AND Bexp  / 11
17 : Bexp -> Bexp . OR Bexp  / 11

RPAREN => shift 66
AND => shift 44
OR => shift 45

-----

State 54:

0 : Aexp -> LPAREN Aexp . RPAREN  / 12
3 : Aexp -> Aexp . ADD Aexp  / 12
4 : Aexp -> Aexp . SUB Aexp  / 12
5 : Aexp -> Aexp . MULT Aexp  / 12
9 : Bexp -> Aexp . EQUAL Aexp  / 11
10 : Bexp -> Aexp . NOTEQUAL Aexp  / 11
11 : Bexp -> Aexp . LESS Aexp  / 11
12 : Bexp -> Aexp . LESSEQUAL Aexp  / 11
13 : Bexp -> Aexp . GREATER Aexp  / 11
14 : Bexp -> Aexp . GREATEREQUAL Aexp  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => shift 40
EQUAL => shift 51
NOTEQUAL => shift 50
LESS => shift 49
LESSEQUAL => shift 48
GREATER => shift 47
GREATEREQUAL => shift 46

-----

State 55:

18 : Cmd -> IDENT ASSIGN Aexp SEMI .  / 2

$ => reduce 18
IDENT => reduce 18
IF => reduce 18
RBRACE => reduce 18
LOOP => reduce 18
WHILE => reduce 18
BREAK => reduce 18
CONTINUE => reduce 18
RETURN => reduce 18

-----

State 56:

21 : Cmd -> WHILE LPAREN TRUE RPAREN Block .  / 2

$ => reduce 21
IDENT => reduce 21
IF => reduce 21
RBRACE => reduce 21
LOOP => reduce 21
WHILE => reduce 21
BREAK => reduce 21
CONTINUE => reduce 21
RETURN => reduce 21

-----

State 57:

19 : Cmd -> IF LPAREN Bexp RPAREN Block . ELSE Block  / 2

ELSE => shift 67

-----

State 58:

16 : Bexp -> Bexp . AND Bexp  / 11
16 : Bexp -> Bexp AND Bexp .  / 11
17 : Bexp -> Bexp . OR Bexp  / 11

RPAREN => reduce 16
AND => reduce 16, shift 44  PRECEDENCE
OR => reduce 16, shift 45  PRECEDENCE

-----

State 59:

16 : Bexp -> Bexp . AND Bexp  / 11
17 : Bexp -> Bexp . OR Bexp  / 11
17 : Bexp -> Bexp OR Bexp .  / 11

RPAREN => reduce 17
AND => shift 44, reduce 17  PRECEDENCE
OR => reduce 17, shift 45  PRECEDENCE

-----

State 60:

3 : Aexp -> Aexp . ADD Aexp  / 14
4 : Aexp -> Aexp . SUB Aexp  / 14
5 : Aexp -> Aexp . MULT Aexp  / 14
14 : Bexp -> Aexp GREATEREQUAL Aexp .  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => reduce 14
AND => reduce 14
OR => reduce 14

-----

State 61:

3 : Aexp -> Aexp . ADD Aexp  / 14
4 : Aexp -> Aexp . SUB Aexp  / 14
5 : Aexp -> Aexp . MULT Aexp  / 14
13 : Bexp -> Aexp GREATER Aexp .  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => reduce 13
AND => reduce 13
OR => reduce 13

-----

State 62:

3 : Aexp -> Aexp . ADD Aexp  / 14
4 : Aexp -> Aexp . SUB Aexp  / 14
5 : Aexp -> Aexp . MULT Aexp  / 14
12 : Bexp -> Aexp LESSEQUAL Aexp .  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => reduce 12
AND => reduce 12
OR => reduce 12

-----

State 63:

3 : Aexp -> Aexp . ADD Aexp  / 14
4 : Aexp -> Aexp . SUB Aexp  / 14
5 : Aexp -> Aexp . MULT Aexp  / 14
11 : Bexp -> Aexp LESS Aexp .  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => reduce 11
AND => reduce 11
OR => reduce 11

-----

State 64:

3 : Aexp -> Aexp . ADD Aexp  / 14
4 : Aexp -> Aexp . SUB Aexp  / 14
5 : Aexp -> Aexp . MULT Aexp  / 14
10 : Bexp -> Aexp NOTEQUAL Aexp .  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => reduce 10
AND => reduce 10
OR => reduce 10

-----

State 65:

3 : Aexp -> Aexp . ADD Aexp  / 14
4 : Aexp -> Aexp . SUB Aexp  / 14
5 : Aexp -> Aexp . MULT Aexp  / 14
9 : Bexp -> Aexp EQUAL Aexp .  / 11

ADD => shift 25
SUB => shift 24
MULT => shift 23
RPAREN => reduce 9
AND => reduce 9
OR => reduce 9

-----

State 66:

6 : Bexp -> LPAREN Bexp RPAREN .  / 11

RPAREN => reduce 6
AND => reduce 6
OR => reduce 6

-----

State 67:

19 : Cmd -> IF LPAREN Bexp RPAREN Block ELSE . Block  / 2
25 : Block -> . LBRACE Cmds RBRACE  / 2
26 : Block -> . LBRACE RBRACE  / 2

LBRACE => shift 18
Block => goto 68

-----

State 68:

19 : Cmd -> IF LPAREN Bexp RPAREN Block ELSE Block .  / 2

$ => reduce 19
IDENT => reduce 19
IF => reduce 19
RBRACE => reduce 19
LOOP => reduce 19
WHILE => reduce 19
BREAK => reduce 19
CONTINUE => reduce 19
RETURN => reduce 19

-----

lookahead 0 = $ 
lookahead 1 = $ IDENT IF LOOP WHILE BREAK CONTINUE RETURN 
lookahead 2 = $ IDENT IF RBRACE LOOP WHILE BREAK CONTINUE RETURN 
lookahead 3 = $ RBRACE 
lookahead 4 = ADD SUB MULT SEMI 
lookahead 5 = ADD SUB MULT RPAREN 
lookahead 6 = ADD SUB MULT RPAREN EQUAL NOTEQUAL LESS LESSEQUAL GREATER GREATEREQUAL AND OR SEMI 
lookahead 7 = IDENT IF RBRACE LOOP WHILE BREAK CONTINUE RETURN 
lookahead 8 = $ IDENT IF RBRACE ELSE LOOP WHILE BREAK CONTINUE RETURN 
lookahead 9 = RBRACE 
lookahead 10 = ADD SUB MULT EQUAL NOTEQUAL LESS LESSEQUAL GREATER GREATEREQUAL 
lookahead 11 = RPAREN AND OR 
lookahead 12 = ADD SUB MULT RPAREN EQUAL NOTEQUAL LESS LESSEQUAL GREATER GREATEREQUAL 
lookahead 13 = ELSE 
lookahead 14 = ADD SUB MULT RPAREN AND OR 

*)

struct
local
structure Value = struct
datatype nonterminal =
nonterminal
| int of Arg.int
| string of Arg.string
| aexp of Arg.aexp
| bexp of Arg.bexp
| command of Arg.command
| commandlist of Arg.commandlist
end
structure ParseEngine = ParseEngineFun (structure Streamable = Streamable
type terminal = Arg.terminal
type value = Value.nonterminal
val dummy = Value.nonterminal
fun read terminal =
(case terminal of
Arg.ADD => (1, Value.nonterminal)
| Arg.SUB => (2, Value.nonterminal)
| Arg.MULT => (3, Value.nonterminal)
| Arg.NUMBER x => (4, Value.int x)
| Arg.IDENT x => (5, Value.string x)
| Arg.LPAREN => (6, Value.nonterminal)
| Arg.RPAREN => (7, Value.nonterminal)
| Arg.EQUAL => (8, Value.nonterminal)
| Arg.NOTEQUAL => (9, Value.nonterminal)
| Arg.LESS => (10, Value.nonterminal)
| Arg.LESSEQUAL => (11, Value.nonterminal)
| Arg.GREATER => (12, Value.nonterminal)
| Arg.GREATEREQUAL => (13, Value.nonterminal)
| Arg.TRUE => (14, Value.nonterminal)
| Arg.FALSE => (15, Value.nonterminal)
| Arg.AND => (16, Value.nonterminal)
| Arg.OR => (17, Value.nonterminal)
| Arg.NOT => (18, Value.nonterminal)
| Arg.ASSIGN => (19, Value.nonterminal)
| Arg.SEMI => (20, Value.nonterminal)
| Arg.IF => (21, Value.nonterminal)
| Arg.LBRACE => (22, Value.nonterminal)
| Arg.RBRACE => (23, Value.nonterminal)
| Arg.ELSE => (24, Value.nonterminal)
| Arg.LOOP => (25, Value.nonterminal)
| Arg.WHILE => (26, Value.nonterminal)
| Arg.BREAK => (27, Value.nonterminal)
| Arg.CONTINUE => (28, Value.nonterminal)
| Arg.RETURN => (29, Value.nonterminal)
)
)
in
val parse = ParseEngine.parse (
ParseEngine.next5x1 "\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\136\128\128\128\135\134\133\132\131\128\128c\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\136\128cb\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128b\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\151\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\143\142\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128}}}\128\128\128}}}}}}}\128\128}}\128\128}\128\128\128\128\128\128\128\128\128\128\128\128|||\128\128\128|||||||\128\128||\128\128|\128\128\128\128\128\128\128\128\128\128\128g\128\128\128\128g\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128g\128g\128ggggg\128\128h\128\128\128\128h\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128h\128h\128hhhhh\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\156\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\137\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\136\128\157\128\135\134\133\132\131\128\128j\128\128\128\128j\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128j\128j\128jjjjj\128\128\128\128\128\128\143\142\164\128\128\128\128\128\128\128\163\162\128\128\161\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\143\142\141\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128f\128\128\128\128f\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128f\128f\128fffffd\128\128\128\128d\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128d\128dddddddv\128\128\128\128\128\128\128\128vv\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128w\128\128\128\128\128\128\128\128ww\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\143\142\164\128\128\128\128\128\128\128\163\162\128\128\161\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\184\128\128\128\128\128\128\128\128\128\128\128\128yy\152\128\128\128yyyyyyy\128\128yy\128\128y\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128zzzzzzz\128\128zz\128\128z\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128{{{{{{{\128\128{{\128\128{\128\128\128\128\128\128\128\128\128\128\128\128~~~\128\128\128~~~~~~~\128\128~~\128\128~\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\128\128\128\128\128\128\128\128\128e\128\128\128\128e\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128e\128eeeeeeeo\128\128\128\128\128\128\128\128oo\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\195\128\128\128\128\128\128\128\128\173\174\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128\169\180\179\178\177\176\175\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128l\128\128\128\128l\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128l\128l\128lllll\128\128i\128\128\128\128i\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128i\128i\128iiiii\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\196\128\128\128\128\128\128\128\128\128\128\128\128\128\128n\128\128\128\128\128\128\128\128nn\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128m\128\128\128\128\128\128\128\128\173m\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128p\128\128\128\128\128\128\128\128pp\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128q\128\128\128\128\128\128\128\128qq\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128r\128\128\128\128\128\128\128\128rr\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128s\128\128\128\128\128\128\128\128ss\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128t\128\128\128\128\128\128\128\128tt\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\154\153\152\128\128\128u\128\128\128\128\128\128\128\128uu\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128x\128\128\128\128\128\128\128\128xx\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128\147\128\128\128\128\128\128\128\128\128k\128\128\128\128k\128\128\128\128\128\128\128\128\128\128\128\128\128\128\128k\128k\128kkkkk\128\128",
ParseEngine.next5x
Vector.fromList [(0,3,(fn _::Value.aexp(arg0)::_::rest => Value.aexp(Arg.aexp_id arg0)::rest|_=>raise (Fail "bad parser"))),
(0,1,(fn Value.string(arg0)::rest => Value.aexp(Arg.aexp_ident arg0)::rest|_=>raise (Fail "bad parser"))),
(0,1,(fn Value.int(arg0)::rest => Value.aexp(Arg.aexp_number arg0)::rest|_=>raise (Fail "bad parser"))),
(0,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.aexp(Arg.aexp_add {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(0,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.aexp(Arg.aexp_sub {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(0,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.aexp(Arg.aexp_mult {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn _::Value.bexp(arg0)::_::rest => Value.bexp(Arg.bexp_id arg0)::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.bexp(Arg.bexp_true {})::rest|_=>raise (Fail "bad parser"))),
(1,1,(fn _::rest => Value.bexp(Arg.bexp_false {})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_equal {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_notequal {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_less {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_lessequal {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_greater {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.aexp(arg0)::_::Value.aexp(arg1)::rest => Value.bexp(Arg.bexp_greaterequal {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,2,(fn Value.bexp(arg0)::_::rest => Value.bexp(Arg.bexp_not arg0)::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.bexp(arg0)::_::Value.bexp(arg1)::rest => Value.bexp(Arg.bexp_and {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(1,3,(fn Value.bexp(arg0)::_::Value.bexp(arg1)::rest => Value.bexp(Arg.bexp_or {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,4,(fn _::Value.aexp(arg0)::_::Value.string(arg1)::rest => Value.command(Arg.cmd_assign {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser"))),
(2,7,(fn Value.commandlist(arg0)::_::Value.commandlist(arg1)::_::Value.bexp(arg2)::_::_::rest => Value.command(Arg.cmd_if {3=arg0,2=arg1,1=arg2})::rest|_=>raise (Fail "bad parser"))),
(2,2,(fn Value.commandlist(arg0)::_::rest => Value.command(Arg.cmd_loop arg0)::rest|_=>raise (Fail "bad parser"))),
(2,5,(fn Value.commandlist(arg0)::_::_::_::_::rest => Value.command(Arg.cmd_loop arg0)::rest|_=>raise (Fail "bad parser"))),
(2,2,(fn _::_::rest => Value.command(Arg.cmd_break {})::rest|_=>raise (Fail "bad parser"))),
(2,2,(fn _::_::rest => Value.command(Arg.cmd_continue {})::rest|_=>raise (Fail "bad parser"))),
(2,3,(fn _::Value.aexp(arg0)::_::rest => Value.command(Arg.cmd_return arg0)::rest|_=>raise (Fail "bad parser"))),
(3,3,(fn _::Value.commandlist(arg0)::_::rest => Value.commandlist(Arg.cmds_id arg0)::rest|_=>raise (Fail "bad parser"))),
(3,2,(fn _::_::rest => Value.commandlist(Arg.cmds_empty {})::rest|_=>raise (Fail "bad parser"))),
(4,1,(fn Value.command(arg0)::rest => Value.commandlist(Arg.cmds_one arg0)::rest|_=>raise (Fail "bad parser"))),
(4,2,(fn Value.commandlist(arg0)::Value.command(arg1)::rest => Value.commandlist(Arg.cmds_cons {2=arg0,1=arg1})::rest|_=>raise (Fail "bad parser")))],
(fn Value.commandlist x => x | _ => raise (Fail "bad parser")), Arg.error)
end
end
